// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: thermal_control/msgs/ThermalNodeState.proto

#include "thermal_control/msgs/ThermalNodeState.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ThermalNodeState_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto;
namespace thermal_control {
namespace msgs {
class ThermalNodeStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ThermalNodeState> _instance;
} _ThermalNodeState_default_instance_;
class ThermalNodeState_VDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ThermalNodeState_V> _instance;
} _ThermalNodeState_V_default_instance_;
}  // namespace msgs
}  // namespace thermal_control
static void InitDefaultsscc_info_ThermalNodeState_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::thermal_control::msgs::_ThermalNodeState_default_instance_;
    new (ptr) ::thermal_control::msgs::ThermalNodeState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::thermal_control::msgs::ThermalNodeState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ThermalNodeState_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ThermalNodeState_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto}, {}};

static void InitDefaultsscc_info_ThermalNodeState_V_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::thermal_control::msgs::_ThermalNodeState_V_default_instance_;
    new (ptr) ::thermal_control::msgs::ThermalNodeState_V();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::thermal_control::msgs::ThermalNodeState_V::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ThermalNodeState_V_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ThermalNodeState_V_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto}, {
      &scc_info_ThermalNodeState_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::thermal_control::msgs::ThermalNodeState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::thermal_control::msgs::ThermalNodeState, name_),
  PROTOBUF_FIELD_OFFSET(::thermal_control::msgs::ThermalNodeState, temperature_),
  PROTOBUF_FIELD_OFFSET(::thermal_control::msgs::ThermalNodeState, heat_capacity_),
  PROTOBUF_FIELD_OFFSET(::thermal_control::msgs::ThermalNodeState, internal_power_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::thermal_control::msgs::ThermalNodeState_V, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::thermal_control::msgs::ThermalNodeState_V, states_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::thermal_control::msgs::ThermalNodeState)},
  { 9, -1, sizeof(::thermal_control::msgs::ThermalNodeState_V)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::thermal_control::msgs::_ThermalNodeState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::thermal_control::msgs::_ThermalNodeState_V_default_instance_),
};

const char descriptor_table_protodef_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+thermal_control/msgs/ThermalNodeState."
  "proto\022\024thermal_control.msgs\"d\n\020ThermalNo"
  "deState\022\014\n\004name\030\001 \001(\t\022\023\n\013temperature\030\002 \001"
  "(\001\022\025\n\rheat_capacity\030\003 \001(\001\022\026\n\016internal_po"
  "wer\030\004 \001(\001\"L\n\022ThermalNodeState_V\0226\n\006state"
  "s\030\001 \003(\0132&.thermal_control.msgs.ThermalNo"
  "deStateb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto_sccs[2] = {
  &scc_info_ThermalNodeState_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto.base,
  &scc_info_ThermalNodeState_V_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto = {
  false, false, descriptor_table_protodef_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto, "thermal_control/msgs/ThermalNodeState.proto", 255,
  &descriptor_table_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto_once, descriptor_table_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto_sccs, descriptor_table_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto::offsets,
  file_level_metadata_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto, 2, file_level_enum_descriptors_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto, file_level_service_descriptors_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto)), true);
namespace thermal_control {
namespace msgs {

// ===================================================================

void ThermalNodeState::InitAsDefaultInstance() {
}
class ThermalNodeState::_Internal {
 public:
};

ThermalNodeState::ThermalNodeState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:thermal_control.msgs.ThermalNodeState)
}
ThermalNodeState::ThermalNodeState(const ThermalNodeState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&temperature_, &from.temperature_,
    static_cast<size_t>(reinterpret_cast<char*>(&internal_power_) -
    reinterpret_cast<char*>(&temperature_)) + sizeof(internal_power_));
  // @@protoc_insertion_point(copy_constructor:thermal_control.msgs.ThermalNodeState)
}

void ThermalNodeState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ThermalNodeState_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&temperature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&internal_power_) -
      reinterpret_cast<char*>(&temperature_)) + sizeof(internal_power_));
}

ThermalNodeState::~ThermalNodeState() {
  // @@protoc_insertion_point(destructor:thermal_control.msgs.ThermalNodeState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ThermalNodeState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ThermalNodeState::ArenaDtor(void* object) {
  ThermalNodeState* _this = reinterpret_cast< ThermalNodeState* >(object);
  (void)_this;
}
void ThermalNodeState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ThermalNodeState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ThermalNodeState& ThermalNodeState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ThermalNodeState_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto.base);
  return *internal_default_instance();
}


void ThermalNodeState::Clear() {
// @@protoc_insertion_point(message_clear_start:thermal_control.msgs.ThermalNodeState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&temperature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&internal_power_) -
      reinterpret_cast<char*>(&temperature_)) + sizeof(internal_power_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThermalNodeState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "thermal_control.msgs.ThermalNodeState.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double temperature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double heat_capacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          heat_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double internal_power = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          internal_power_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ThermalNodeState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:thermal_control.msgs.ThermalNodeState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "thermal_control.msgs.ThermalNodeState.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // double temperature = 2;
  if (!(this->temperature() <= 0 && this->temperature() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_temperature(), target);
  }

  // double heat_capacity = 3;
  if (!(this->heat_capacity() <= 0 && this->heat_capacity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_heat_capacity(), target);
  }

  // double internal_power = 4;
  if (!(this->internal_power() <= 0 && this->internal_power() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_internal_power(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:thermal_control.msgs.ThermalNodeState)
  return target;
}

size_t ThermalNodeState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:thermal_control.msgs.ThermalNodeState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // double temperature = 2;
  if (!(this->temperature() <= 0 && this->temperature() >= 0)) {
    total_size += 1 + 8;
  }

  // double heat_capacity = 3;
  if (!(this->heat_capacity() <= 0 && this->heat_capacity() >= 0)) {
    total_size += 1 + 8;
  }

  // double internal_power = 4;
  if (!(this->internal_power() <= 0 && this->internal_power() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThermalNodeState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:thermal_control.msgs.ThermalNodeState)
  GOOGLE_DCHECK_NE(&from, this);
  const ThermalNodeState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ThermalNodeState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:thermal_control.msgs.ThermalNodeState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:thermal_control.msgs.ThermalNodeState)
    MergeFrom(*source);
  }
}

void ThermalNodeState::MergeFrom(const ThermalNodeState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:thermal_control.msgs.ThermalNodeState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (!(from.temperature() <= 0 && from.temperature() >= 0)) {
    _internal_set_temperature(from._internal_temperature());
  }
  if (!(from.heat_capacity() <= 0 && from.heat_capacity() >= 0)) {
    _internal_set_heat_capacity(from._internal_heat_capacity());
  }
  if (!(from.internal_power() <= 0 && from.internal_power() >= 0)) {
    _internal_set_internal_power(from._internal_internal_power());
  }
}

void ThermalNodeState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:thermal_control.msgs.ThermalNodeState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThermalNodeState::CopyFrom(const ThermalNodeState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:thermal_control.msgs.ThermalNodeState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThermalNodeState::IsInitialized() const {
  return true;
}

void ThermalNodeState::InternalSwap(ThermalNodeState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThermalNodeState, internal_power_)
      + sizeof(ThermalNodeState::internal_power_)
      - PROTOBUF_FIELD_OFFSET(ThermalNodeState, temperature_)>(
          reinterpret_cast<char*>(&temperature_),
          reinterpret_cast<char*>(&other->temperature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ThermalNodeState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ThermalNodeState_V::InitAsDefaultInstance() {
}
class ThermalNodeState_V::_Internal {
 public:
};

ThermalNodeState_V::ThermalNodeState_V(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  states_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:thermal_control.msgs.ThermalNodeState_V)
}
ThermalNodeState_V::ThermalNodeState_V(const ThermalNodeState_V& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      states_(from.states_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:thermal_control.msgs.ThermalNodeState_V)
}

void ThermalNodeState_V::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ThermalNodeState_V_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto.base);
}

ThermalNodeState_V::~ThermalNodeState_V() {
  // @@protoc_insertion_point(destructor:thermal_control.msgs.ThermalNodeState_V)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ThermalNodeState_V::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ThermalNodeState_V::ArenaDtor(void* object) {
  ThermalNodeState_V* _this = reinterpret_cast< ThermalNodeState_V* >(object);
  (void)_this;
}
void ThermalNodeState_V::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ThermalNodeState_V::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ThermalNodeState_V& ThermalNodeState_V::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ThermalNodeState_V_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto.base);
  return *internal_default_instance();
}


void ThermalNodeState_V::Clear() {
// @@protoc_insertion_point(message_clear_start:thermal_control.msgs.ThermalNodeState_V)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  states_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThermalNodeState_V::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .thermal_control.msgs.ThermalNodeState states = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ThermalNodeState_V::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:thermal_control.msgs.ThermalNodeState_V)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .thermal_control.msgs.ThermalNodeState states = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_states_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_states(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:thermal_control.msgs.ThermalNodeState_V)
  return target;
}

size_t ThermalNodeState_V::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:thermal_control.msgs.ThermalNodeState_V)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .thermal_control.msgs.ThermalNodeState states = 1;
  total_size += 1UL * this->_internal_states_size();
  for (const auto& msg : this->states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThermalNodeState_V::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:thermal_control.msgs.ThermalNodeState_V)
  GOOGLE_DCHECK_NE(&from, this);
  const ThermalNodeState_V* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ThermalNodeState_V>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:thermal_control.msgs.ThermalNodeState_V)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:thermal_control.msgs.ThermalNodeState_V)
    MergeFrom(*source);
  }
}

void ThermalNodeState_V::MergeFrom(const ThermalNodeState_V& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:thermal_control.msgs.ThermalNodeState_V)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  states_.MergeFrom(from.states_);
}

void ThermalNodeState_V::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:thermal_control.msgs.ThermalNodeState_V)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThermalNodeState_V::CopyFrom(const ThermalNodeState_V& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:thermal_control.msgs.ThermalNodeState_V)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThermalNodeState_V::IsInitialized() const {
  return true;
}

void ThermalNodeState_V::InternalSwap(ThermalNodeState_V* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  states_.InternalSwap(&other->states_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ThermalNodeState_V::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace thermal_control
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::thermal_control::msgs::ThermalNodeState* Arena::CreateMaybeMessage< ::thermal_control::msgs::ThermalNodeState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::thermal_control::msgs::ThermalNodeState >(arena);
}
template<> PROTOBUF_NOINLINE ::thermal_control::msgs::ThermalNodeState_V* Arena::CreateMaybeMessage< ::thermal_control::msgs::ThermalNodeState_V >(Arena* arena) {
  return Arena::CreateMessageInternal< ::thermal_control::msgs::ThermalNodeState_V >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
