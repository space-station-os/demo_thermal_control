// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: thermal_control/msgs/ThermalNodeState.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto;
namespace thermal_control {
namespace msgs {
class ThermalNodeState;
class ThermalNodeStateDefaultTypeInternal;
extern ThermalNodeStateDefaultTypeInternal _ThermalNodeState_default_instance_;
class ThermalNodeState_V;
class ThermalNodeState_VDefaultTypeInternal;
extern ThermalNodeState_VDefaultTypeInternal _ThermalNodeState_V_default_instance_;
}  // namespace msgs
}  // namespace thermal_control
PROTOBUF_NAMESPACE_OPEN
template<> ::thermal_control::msgs::ThermalNodeState* Arena::CreateMaybeMessage<::thermal_control::msgs::ThermalNodeState>(Arena*);
template<> ::thermal_control::msgs::ThermalNodeState_V* Arena::CreateMaybeMessage<::thermal_control::msgs::ThermalNodeState_V>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace thermal_control {
namespace msgs {

// ===================================================================

class ThermalNodeState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:thermal_control.msgs.ThermalNodeState) */ {
 public:
  inline ThermalNodeState() : ThermalNodeState(nullptr) {};
  virtual ~ThermalNodeState();

  ThermalNodeState(const ThermalNodeState& from);
  ThermalNodeState(ThermalNodeState&& from) noexcept
    : ThermalNodeState() {
    *this = ::std::move(from);
  }

  inline ThermalNodeState& operator=(const ThermalNodeState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThermalNodeState& operator=(ThermalNodeState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ThermalNodeState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ThermalNodeState* internal_default_instance() {
    return reinterpret_cast<const ThermalNodeState*>(
               &_ThermalNodeState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ThermalNodeState& a, ThermalNodeState& b) {
    a.Swap(&b);
  }
  inline void Swap(ThermalNodeState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThermalNodeState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ThermalNodeState* New() const final {
    return CreateMaybeMessage<ThermalNodeState>(nullptr);
  }

  ThermalNodeState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThermalNodeState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ThermalNodeState& from);
  void MergeFrom(const ThermalNodeState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThermalNodeState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "thermal_control.msgs.ThermalNodeState";
  }
  protected:
  explicit ThermalNodeState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto);
    return ::descriptor_table_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTemperatureFieldNumber = 2,
    kHeatCapacityFieldNumber = 3,
    kInternalPowerFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // double temperature = 2;
  void clear_temperature();
  double temperature() const;
  void set_temperature(double value);
  private:
  double _internal_temperature() const;
  void _internal_set_temperature(double value);
  public:

  // double heat_capacity = 3;
  void clear_heat_capacity();
  double heat_capacity() const;
  void set_heat_capacity(double value);
  private:
  double _internal_heat_capacity() const;
  void _internal_set_heat_capacity(double value);
  public:

  // double internal_power = 4;
  void clear_internal_power();
  double internal_power() const;
  void set_internal_power(double value);
  private:
  double _internal_internal_power() const;
  void _internal_set_internal_power(double value);
  public:

  // @@protoc_insertion_point(class_scope:thermal_control.msgs.ThermalNodeState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  double temperature_;
  double heat_capacity_;
  double internal_power_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto;
};
// -------------------------------------------------------------------

class ThermalNodeState_V PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:thermal_control.msgs.ThermalNodeState_V) */ {
 public:
  inline ThermalNodeState_V() : ThermalNodeState_V(nullptr) {};
  virtual ~ThermalNodeState_V();

  ThermalNodeState_V(const ThermalNodeState_V& from);
  ThermalNodeState_V(ThermalNodeState_V&& from) noexcept
    : ThermalNodeState_V() {
    *this = ::std::move(from);
  }

  inline ThermalNodeState_V& operator=(const ThermalNodeState_V& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThermalNodeState_V& operator=(ThermalNodeState_V&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ThermalNodeState_V& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ThermalNodeState_V* internal_default_instance() {
    return reinterpret_cast<const ThermalNodeState_V*>(
               &_ThermalNodeState_V_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ThermalNodeState_V& a, ThermalNodeState_V& b) {
    a.Swap(&b);
  }
  inline void Swap(ThermalNodeState_V* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThermalNodeState_V* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ThermalNodeState_V* New() const final {
    return CreateMaybeMessage<ThermalNodeState_V>(nullptr);
  }

  ThermalNodeState_V* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThermalNodeState_V>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ThermalNodeState_V& from);
  void MergeFrom(const ThermalNodeState_V& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThermalNodeState_V* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "thermal_control.msgs.ThermalNodeState_V";
  }
  protected:
  explicit ThermalNodeState_V(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto);
    return ::descriptor_table_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatesFieldNumber = 1,
  };
  // repeated .thermal_control.msgs.ThermalNodeState states = 1;
  int states_size() const;
  private:
  int _internal_states_size() const;
  public:
  void clear_states();
  ::thermal_control::msgs::ThermalNodeState* mutable_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::thermal_control::msgs::ThermalNodeState >*
      mutable_states();
  private:
  const ::thermal_control::msgs::ThermalNodeState& _internal_states(int index) const;
  ::thermal_control::msgs::ThermalNodeState* _internal_add_states();
  public:
  const ::thermal_control::msgs::ThermalNodeState& states(int index) const;
  ::thermal_control::msgs::ThermalNodeState* add_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::thermal_control::msgs::ThermalNodeState >&
      states() const;

  // @@protoc_insertion_point(class_scope:thermal_control.msgs.ThermalNodeState_V)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::thermal_control::msgs::ThermalNodeState > states_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ThermalNodeState

// string name = 1;
inline void ThermalNodeState::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ThermalNodeState::name() const {
  // @@protoc_insertion_point(field_get:thermal_control.msgs.ThermalNodeState.name)
  return _internal_name();
}
inline void ThermalNodeState::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:thermal_control.msgs.ThermalNodeState.name)
}
inline std::string* ThermalNodeState::mutable_name() {
  // @@protoc_insertion_point(field_mutable:thermal_control.msgs.ThermalNodeState.name)
  return _internal_mutable_name();
}
inline const std::string& ThermalNodeState::_internal_name() const {
  return name_.Get();
}
inline void ThermalNodeState::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ThermalNodeState::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:thermal_control.msgs.ThermalNodeState.name)
}
inline void ThermalNodeState::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:thermal_control.msgs.ThermalNodeState.name)
}
inline void ThermalNodeState::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:thermal_control.msgs.ThermalNodeState.name)
}
inline std::string* ThermalNodeState::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ThermalNodeState::release_name() {
  // @@protoc_insertion_point(field_release:thermal_control.msgs.ThermalNodeState.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ThermalNodeState::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:thermal_control.msgs.ThermalNodeState.name)
}
inline std::string* ThermalNodeState::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:thermal_control.msgs.ThermalNodeState.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ThermalNodeState::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:thermal_control.msgs.ThermalNodeState.name)
}

// double temperature = 2;
inline void ThermalNodeState::clear_temperature() {
  temperature_ = 0;
}
inline double ThermalNodeState::_internal_temperature() const {
  return temperature_;
}
inline double ThermalNodeState::temperature() const {
  // @@protoc_insertion_point(field_get:thermal_control.msgs.ThermalNodeState.temperature)
  return _internal_temperature();
}
inline void ThermalNodeState::_internal_set_temperature(double value) {
  
  temperature_ = value;
}
inline void ThermalNodeState::set_temperature(double value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:thermal_control.msgs.ThermalNodeState.temperature)
}

// double heat_capacity = 3;
inline void ThermalNodeState::clear_heat_capacity() {
  heat_capacity_ = 0;
}
inline double ThermalNodeState::_internal_heat_capacity() const {
  return heat_capacity_;
}
inline double ThermalNodeState::heat_capacity() const {
  // @@protoc_insertion_point(field_get:thermal_control.msgs.ThermalNodeState.heat_capacity)
  return _internal_heat_capacity();
}
inline void ThermalNodeState::_internal_set_heat_capacity(double value) {
  
  heat_capacity_ = value;
}
inline void ThermalNodeState::set_heat_capacity(double value) {
  _internal_set_heat_capacity(value);
  // @@protoc_insertion_point(field_set:thermal_control.msgs.ThermalNodeState.heat_capacity)
}

// double internal_power = 4;
inline void ThermalNodeState::clear_internal_power() {
  internal_power_ = 0;
}
inline double ThermalNodeState::_internal_internal_power() const {
  return internal_power_;
}
inline double ThermalNodeState::internal_power() const {
  // @@protoc_insertion_point(field_get:thermal_control.msgs.ThermalNodeState.internal_power)
  return _internal_internal_power();
}
inline void ThermalNodeState::_internal_set_internal_power(double value) {
  
  internal_power_ = value;
}
inline void ThermalNodeState::set_internal_power(double value) {
  _internal_set_internal_power(value);
  // @@protoc_insertion_point(field_set:thermal_control.msgs.ThermalNodeState.internal_power)
}

// -------------------------------------------------------------------

// ThermalNodeState_V

// repeated .thermal_control.msgs.ThermalNodeState states = 1;
inline int ThermalNodeState_V::_internal_states_size() const {
  return states_.size();
}
inline int ThermalNodeState_V::states_size() const {
  return _internal_states_size();
}
inline void ThermalNodeState_V::clear_states() {
  states_.Clear();
}
inline ::thermal_control::msgs::ThermalNodeState* ThermalNodeState_V::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:thermal_control.msgs.ThermalNodeState_V.states)
  return states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::thermal_control::msgs::ThermalNodeState >*
ThermalNodeState_V::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:thermal_control.msgs.ThermalNodeState_V.states)
  return &states_;
}
inline const ::thermal_control::msgs::ThermalNodeState& ThermalNodeState_V::_internal_states(int index) const {
  return states_.Get(index);
}
inline const ::thermal_control::msgs::ThermalNodeState& ThermalNodeState_V::states(int index) const {
  // @@protoc_insertion_point(field_get:thermal_control.msgs.ThermalNodeState_V.states)
  return _internal_states(index);
}
inline ::thermal_control::msgs::ThermalNodeState* ThermalNodeState_V::_internal_add_states() {
  return states_.Add();
}
inline ::thermal_control::msgs::ThermalNodeState* ThermalNodeState_V::add_states() {
  // @@protoc_insertion_point(field_add:thermal_control.msgs.ThermalNodeState_V.states)
  return _internal_add_states();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::thermal_control::msgs::ThermalNodeState >&
ThermalNodeState_V::states() const {
  // @@protoc_insertion_point(field_list:thermal_control.msgs.ThermalNodeState_V.states)
  return states_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace thermal_control

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_thermal_5fcontrol_2fmsgs_2fThermalNodeState_2eproto
